<?php
			
	/**
	 * Generated by Getz Framework.
	 * 
	 * @author  Mario Sakamoto <mskamot@gmail.com>
	 * @see     https://wtag.com.br/getz 
	 * @since   1.0.0
	 * @version 1.0.0	 
	 */
	 
	namespace src\model; 
	use src\model;
	
	class Situacoes_contatosDao {
		
		private $connection;
		private $size;
		private $log;
		private $columns = SITUACOES_CONTATOS . DOT. ID . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . SITUACOES_CONTATOS . DOT . ID . DOUBLE_QUOTES . COMMA . WHITE_SPACE . SITUACOES_CONTATOS . DOT. SITUACAO_CONTATO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . SITUACOES_CONTATOS . DOT . SITUACAO_CONTATO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . SITUACOES_CONTATOS . DOT. CADASTRADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . SITUACOES_CONTATOS . DOT . CADASTRADO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . SITUACOES_CONTATOS . DOT. MODIFICADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . SITUACOES_CONTATOS . DOT . MODIFICADO . DOUBLE_QUOTES;
		
		public function __construct($connection) {
			$this->connection = $connection;
		}
		
		public function getInsertId() {
			return $this->connection->getInsertId();
		}

		public function getSize() {
			return $this->size;
		}

		private function setLog($log) {
			$this->log = $log;
		}
		
		public function getLog() {
			return $this->log;
		}
		
		public function getColumns() {
			return $this->columns;
		}
		
		public function create($situacoes_contatos) {
			$query = INSERT . WHITE_SPACE . INTO . WHITE_SPACE . SITUACOES_CONTATOS . WHITE_SPACE . LEFT_PARENTHESES . SITUACAO_CONTATO . COMMA . WHITE_SPACE . CADASTRADO . COMMA . WHITE_SPACE . MODIFICADO . COMMA . WHITE_SPACE . COR . RIGHT_PARENTHESES . WHITE_SPACE . VALUES . WHITE_SPACE . LEFT_PARENTHESES . DOUBLE_QUOTES . $situacoes_contatos->getSituacao_contato() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $situacoes_contatos->getCadastrado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $situacoes_contatos->getModificado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $situacoes_contatos->getCores()->getId() . DOUBLE_QUOTES . RIGHT_PARENTHESES;
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function read($where, $order, $hasPagination) {
			$count = NUMBER_ZERO;
			if ($where != STRING_EMPTY) {
				$where = WHERE . WHITE_SPACE . $where . WHITE_SPACE . STRING_AND . WHITE_SPACE . SITUACOES_CONTATOS . DOT . COR . WHITE_SPACE . EQUALS . WHITE_SPACE. CORES . DOT . ID;
			} else {
				$where = WHERE . WHITE_SPACE . SITUACOES_CONTATOS . DOT . COR . WHITE_SPACE . EQUALS . WHITE_SPACE. CORES . DOT . ID;
			}
			if ($order != STRING_EMPTY) {
				$order = ORDER_BY . WHITE_SPACE . $order;
			}
			$coresDao = new model\CoresDao($this->connection);
			$query = SELECT . WHITE_SPACE . $this->columns . COMMA . WHITE_SPACE . $coresDao->getColumns() . WHITE_SPACE . FROM . WHITE_SPACE . SITUACOES_CONTATOS . WHITE_SPACE . SITUACOES_CONTATOS . COMMA . WHITE_SPACE . CORES . WHITE_SPACE . CORES . WHITE_SPACE . $where;
			$this->setLog($query . WHITE_SPACE . $order);
			$result = $this->connection->execute($query . WHITE_SPACE . $order);
			$situacoes_contatosList = array();
			while ($row = $result->fetch_assoc()) {
				$situacoes_contatos = new model\Situacoes_contatos();
				$situacoes_contatos->setId($row[SITUACOES_CONTATOS . POINT . ID]);
				$situacoes_contatos->setSituacao_contato($row[SITUACOES_CONTATOS . POINT . SITUACAO_CONTATO]);
				$situacoes_contatos->setCadastrado($row[SITUACOES_CONTATOS . POINT . CADASTRADO]);
				$situacoes_contatos->setModificado($row[SITUACOES_CONTATOS . POINT . MODIFICADO]);
				$cores = new model\Cores();
				$cores->setId($row[CORES . DOT . ID]);
				$cores->setCor($row[CORES . DOT . COR]);
				$situacoes_contatos->setCores($cores);
				$situacoes_contatosList[$count] = $situacoes_contatos;
				$count++;
			}
			$this->connection->free($result);
			if ($hasPagination && $count > NUMBER_ZERO) {
				$result = $this->connection->execute($query);
				$size = NUMBER_ZERO;
				while ($row = $result->fetch_assoc()) {
					$size++;
				}
				$this->connection->free($result);				
				$this->size = $size;
			}
			return $situacoes_contatosList;
		}

		public function update($situacoes_contatos) {
			$query = UPDATE . WHITE_SPACE . SITUACOES_CONTATOS . WHITE_SPACE . SET . WHITE_SPACE . ID . WHITE_SPACE . EQUALS . 
					WHITE_SPACE . DOUBLE_QUOTES . $situacoes_contatos->getId() . DOUBLE_QUOTES;
			if (!is_null($situacoes_contatos->getSituacao_contato()) && !empty($situacoes_contatos->getSituacao_contato())) {
				$query .= COMMA . WHITE_SPACE . SITUACAO_CONTATO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$situacoes_contatos->getSituacao_contato() . DOUBLE_QUOTES;
			}
			if (!is_null($situacoes_contatos->getCores()) && !empty($situacoes_contatos->getCores()->getId()) &&  
					!empty($situacoes_contatos->getCores()->getId())) {
				$query .= COMMA . WHITE_SPACE . COR . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$situacoes_contatos->getCores()->getId() . DOUBLE_QUOTES;
			}
			$query .= COMMA . WHITE_SPACE . MODIFICADO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
					$situacoes_contatos->getModificado() . DOUBLE_QUOTES . WHITE_SPACE . WHERE . WHITE_SPACE . ID . EQUALS . 
					$situacoes_contatos->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function delete($situacoes_contatos) {
			$query = DELETE . WHITE_SPACE . FROM . WHITE_SPACE . SITUACOES_CONTATOS . WHITE_SPACE . WHERE . WHITE_SPACE . ID . 
					WHITE_SPACE . EQUALS . WHITE_SPACE . $situacoes_contatos->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

	}

?>