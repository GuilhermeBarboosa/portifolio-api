<?php
			
	/**
	 * Generated by Getz Framework.
	 * 
	 * @author  Mario Sakamoto <mskamot@gmail.com>
	 * @see     https://wtag.com.br/getz 
	 * @since   1.0.0
	 * @version 1.0.0	 
	 */
	 
	namespace src\model; 
	use src\model;
	
	class Elemento_conteudosDao {
		
		private $connection;
		private $size;
		private $log;
		private $columns = ELEMENTO_CONTEUDOS . DOT. ID . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . ELEMENTO_CONTEUDOS . DOT . ID . DOUBLE_QUOTES . COMMA . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT. ELEMENTO_CONTEUDO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . ELEMENTO_CONTEUDOS . DOT . ELEMENTO_CONTEUDO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT. ORDEM . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . ELEMENTO_CONTEUDOS . DOT . ORDEM . DOUBLE_QUOTES . COMMA . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT. CADASTRADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . ELEMENTO_CONTEUDOS . DOT . CADASTRADO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT. MODIFICADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . ELEMENTO_CONTEUDOS . DOT . MODIFICADO . DOUBLE_QUOTES;
		
		public function __construct($connection) {
			$this->connection = $connection;
		}
		
		public function getInsertId() {
			return $this->connection->getInsertId();
		}

		public function getSize() {
			return $this->size;
		}

		private function setLog($log) {
			$this->log = $log;
		}
		
		public function getLog() {
			return $this->log;
		}
		
		public function getColumns() {
			return $this->columns;
		}
		
		public function create($elemento_conteudos) {
			$query = INSERT . WHITE_SPACE . INTO . WHITE_SPACE . ELEMENTO_CONTEUDOS . WHITE_SPACE . LEFT_PARENTHESES . ELEMENTO_CONTEUDO . COMMA . WHITE_SPACE . ORDEM . COMMA . WHITE_SPACE . CADASTRADO . COMMA . WHITE_SPACE . MODIFICADO . COMMA . WHITE_SPACE . ELEMENTO . COMMA . WHITE_SPACE . SITUACAO_REGISTRO . COMMA . WHITE_SPACE . TIPO_ALINHAMENTO_HORIZONTAL . COMMA . WHITE_SPACE . TIPO_ALINHAMENTO_VERTICAL . RIGHT_PARENTHESES . WHITE_SPACE . VALUES . WHITE_SPACE . LEFT_PARENTHESES . DOUBLE_QUOTES . $elemento_conteudos->getElemento_conteudo() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getOrdem() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getCadastrado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getModificado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getElementos()->getId() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getSituacoes_registros()->getId() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getTipos_alinhamentos_horizontais()->getId() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getTipos_alinhamentos_verticais()->getId() . DOUBLE_QUOTES . RIGHT_PARENTHESES;
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function read($where, $order, $hasPagination) {
			$count = NUMBER_ZERO;
			if ($where != STRING_EMPTY) {
				$where = WHERE . WHITE_SPACE . $where . WHITE_SPACE . STRING_AND . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . ELEMENTO . WHITE_SPACE . EQUALS . WHITE_SPACE. ELEMENTOS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . SITUACAO_REGISTRO . WHITE_SPACE . EQUALS . WHITE_SPACE. SITUACOES_REGISTROS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . TIPO_ALINHAMENTO_HORIZONTAL . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_ALINHAMENTOS_HORIZONTAIS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . TIPO_ALINHAMENTO_VERTICAL . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_ALINHAMENTOS_VERTICAIS . DOT . ID;
			} else {
				$where = WHERE . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . ELEMENTO . WHITE_SPACE . EQUALS . WHITE_SPACE. ELEMENTOS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . SITUACAO_REGISTRO . WHITE_SPACE . EQUALS . WHITE_SPACE. SITUACOES_REGISTROS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . TIPO_ALINHAMENTO_HORIZONTAL . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_ALINHAMENTOS_HORIZONTAIS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . ELEMENTO_CONTEUDOS . DOT . TIPO_ALINHAMENTO_VERTICAL . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_ALINHAMENTOS_VERTICAIS . DOT . ID;
			}
			if ($order != STRING_EMPTY) {
				$order = ORDER_BY . WHITE_SPACE . $order;
			}
			$elementosDao = new model\ElementosDao($this->connection);
			$situacoes_registrosDao = new model\Situacoes_registrosDao($this->connection);
			$tipos_alinhamentos_horizontaisDao = new model\Tipos_alinhamentos_horizontaisDao($this->connection);
			$tipos_alinhamentos_verticaisDao = new model\Tipos_alinhamentos_verticaisDao($this->connection);
			$query = SELECT . WHITE_SPACE . $this->columns . COMMA . WHITE_SPACE . $elementosDao->getColumns() . COMMA . WHITE_SPACE . $situacoes_registrosDao->getColumns() . COMMA . WHITE_SPACE . $tipos_alinhamentos_horizontaisDao->getColumns() . COMMA . WHITE_SPACE . $tipos_alinhamentos_verticaisDao->getColumns() . WHITE_SPACE . FROM . WHITE_SPACE . ELEMENTO_CONTEUDOS . WHITE_SPACE . ELEMENTO_CONTEUDOS . COMMA . WHITE_SPACE . ELEMENTOS . WHITE_SPACE . ELEMENTOS . COMMA . WHITE_SPACE . SITUACOES_REGISTROS . WHITE_SPACE . SITUACOES_REGISTROS . COMMA . WHITE_SPACE . TIPOS_ALINHAMENTOS_HORIZONTAIS . WHITE_SPACE . TIPOS_ALINHAMENTOS_HORIZONTAIS . COMMA . WHITE_SPACE . TIPOS_ALINHAMENTOS_VERTICAIS . WHITE_SPACE . TIPOS_ALINHAMENTOS_VERTICAIS . WHITE_SPACE . $where;
			$this->setLog($query . WHITE_SPACE . $order);
			$result = $this->connection->execute($query . WHITE_SPACE . $order);
			$elemento_conteudosList = array();
			while ($row = $result->fetch_assoc()) {
				$elemento_conteudos = new model\Elemento_conteudos();
				$elemento_conteudos->setId($row[ELEMENTO_CONTEUDOS . POINT . ID]);
				$elemento_conteudos->setElemento_conteudo($row[ELEMENTO_CONTEUDOS . POINT . ELEMENTO_CONTEUDO]);
				$elemento_conteudos->setOrdem($row[ELEMENTO_CONTEUDOS . POINT . ORDEM]);
				$elemento_conteudos->setCadastrado($row[ELEMENTO_CONTEUDOS . POINT . CADASTRADO]);
				$elemento_conteudos->setModificado($row[ELEMENTO_CONTEUDOS . POINT . MODIFICADO]);
				$elementos = new model\Elementos();
				$elementos->setId($row[ELEMENTOS . DOT . ID]);
				$elementos->setElemento($row[ELEMENTOS . DOT . ELEMENTO]);
				$elemento_conteudos->setElementos($elementos);
				$situacoes_registros = new model\Situacoes_registros();
				$situacoes_registros->setId($row[SITUACOES_REGISTROS . DOT . ID]);
				$situacoes_registros->setSituacao_registro($row[SITUACOES_REGISTROS . DOT . SITUACAO_REGISTRO]);
				$elemento_conteudos->setSituacoes_registros($situacoes_registros);
				$tipos_alinhamentos_horizontais = new model\Tipos_alinhamentos_horizontais();
				$tipos_alinhamentos_horizontais->setId($row[TIPOS_ALINHAMENTOS_HORIZONTAIS . DOT . ID]);
				$tipos_alinhamentos_horizontais->setTipo_alinhamento_horizontal($row[TIPOS_ALINHAMENTOS_HORIZONTAIS . DOT . TIPO_ALINHAMENTO_HORIZONTAL]);
				$elemento_conteudos->setTipos_alinhamentos_horizontais($tipos_alinhamentos_horizontais);
				$tipos_alinhamentos_verticais = new model\Tipos_alinhamentos_verticais();
				$tipos_alinhamentos_verticais->setId($row[TIPOS_ALINHAMENTOS_VERTICAIS . DOT . ID]);
				$tipos_alinhamentos_verticais->setTipo_alinhamento_vertical($row[TIPOS_ALINHAMENTOS_VERTICAIS . DOT . TIPO_ALINHAMENTO_VERTICAL]);
				$elemento_conteudos->setTipos_alinhamentos_verticais($tipos_alinhamentos_verticais);
				$elemento_conteudosList[$count] = $elemento_conteudos;
				$count++;
			}
			$this->connection->free($result);
			if ($hasPagination && $count > NUMBER_ZERO) {
				$result = $this->connection->execute($query);
				$size = NUMBER_ZERO;
				while ($row = $result->fetch_assoc()) {
					$size++;
				}
				$this->connection->free($result);				
				$this->size = $size;
			}
			return $elemento_conteudosList;
		}

		public function update($elemento_conteudos) {
			$query = UPDATE . WHITE_SPACE . ELEMENTO_CONTEUDOS . WHITE_SPACE . SET . WHITE_SPACE . ID . WHITE_SPACE . EQUALS . 
					WHITE_SPACE . DOUBLE_QUOTES . $elemento_conteudos->getId() . DOUBLE_QUOTES;
			if (!is_null($elemento_conteudos->getElemento_conteudo()) && !empty($elemento_conteudos->getElemento_conteudo())) {
				$query .= COMMA . WHITE_SPACE . ELEMENTO_CONTEUDO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$elemento_conteudos->getElemento_conteudo() . DOUBLE_QUOTES;
			}
			if (!is_null($elemento_conteudos->getOrdem()) && !empty($elemento_conteudos->getOrdem())) {
				$query .= COMMA . WHITE_SPACE . ORDEM . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$elemento_conteudos->getOrdem() . DOUBLE_QUOTES;
			}
			if (!is_null($elemento_conteudos->getElementos()) && !empty($elemento_conteudos->getElementos()->getId()) &&  
					!empty($elemento_conteudos->getElementos()->getId())) {
				$query .= COMMA . WHITE_SPACE . ELEMENTO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$elemento_conteudos->getElementos()->getId() . DOUBLE_QUOTES;
			}
			if (!is_null($elemento_conteudos->getSituacoes_registros()) && !empty($elemento_conteudos->getSituacoes_registros()->getId()) &&  
					!empty($elemento_conteudos->getSituacoes_registros()->getId())) {
				$query .= COMMA . WHITE_SPACE . SITUACAO_REGISTRO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$elemento_conteudos->getSituacoes_registros()->getId() . DOUBLE_QUOTES;
			}
			if (!is_null($elemento_conteudos->getTipos_alinhamentos_horizontais()) && !empty($elemento_conteudos->getTipos_alinhamentos_horizontais()->getId()) &&  
					!empty($elemento_conteudos->getTipos_alinhamentos_horizontais()->getId())) {
				$query .= COMMA . WHITE_SPACE . TIPO_ALINHAMENTO_HORIZONTAL . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$elemento_conteudos->getTipos_alinhamentos_horizontais()->getId() . DOUBLE_QUOTES;
			}
			if (!is_null($elemento_conteudos->getTipos_alinhamentos_verticais()) && !empty($elemento_conteudos->getTipos_alinhamentos_verticais()->getId()) &&  
					!empty($elemento_conteudos->getTipos_alinhamentos_verticais()->getId())) {
				$query .= COMMA . WHITE_SPACE . TIPO_ALINHAMENTO_VERTICAL . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$elemento_conteudos->getTipos_alinhamentos_verticais()->getId() . DOUBLE_QUOTES;
			}
			$query .= COMMA . WHITE_SPACE . MODIFICADO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
					$elemento_conteudos->getModificado() . DOUBLE_QUOTES . WHITE_SPACE . WHERE . WHITE_SPACE . ID . EQUALS . 
					$elemento_conteudos->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function delete($elemento_conteudos) {
			$query = DELETE . WHITE_SPACE . FROM . WHITE_SPACE . ELEMENTO_CONTEUDOS . WHITE_SPACE . WHERE . WHITE_SPACE . ID . 
					WHITE_SPACE . EQUALS . WHITE_SPACE . $elemento_conteudos->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

	}

?>