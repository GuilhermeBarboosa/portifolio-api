<?php
			
	/**
	 * Generated by Getz Framework.
	 * 
	 * @author  Mario Sakamoto <mskamot@gmail.com>
	 * @see     https://wtag.com.br/getz 
	 * @since   1.0.0
	 * @version 1.0.0	 
	 */
	 
	namespace src\model; 
	use src\model;
	
	class ContatosDao {
		
		private $connection;
		private $size;
		private $log;
		private $columns = CONTATOS . DOT. ID . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CONTATOS . DOT . ID . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CONTATOS . DOT. CONTATO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CONTATOS . DOT . CONTATO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CONTATOS . DOT. NOME . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CONTATOS . DOT . NOME . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CONTATOS . DOT. EMAIL . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CONTATOS . DOT . EMAIL . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CONTATOS . DOT. CELULAR . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CONTATOS . DOT . CELULAR . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CONTATOS . DOT. CADASTRADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CONTATOS . DOT . CADASTRADO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CONTATOS . DOT. MODIFICADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CONTATOS . DOT . MODIFICADO . DOUBLE_QUOTES;
		
		public function __construct($connection) {
			$this->connection = $connection;
		}
		
		public function getInsertId() {
			return $this->connection->getInsertId();
		}

		public function getSize() {
			return $this->size;
		}

		private function setLog($log) {
			$this->log = $log;
		}
		
		public function getLog() {
			return $this->log;
		}
		
		public function getColumns() {
			return $this->columns;
		}
		
		public function create($contatos) {
			$query = INSERT . WHITE_SPACE . INTO . WHITE_SPACE . CONTATOS . WHITE_SPACE . LEFT_PARENTHESES . CONTATO . COMMA . WHITE_SPACE . NOME . COMMA . WHITE_SPACE . EMAIL . COMMA . WHITE_SPACE . CELULAR . COMMA . WHITE_SPACE . CADASTRADO . COMMA . WHITE_SPACE . MODIFICADO . COMMA . WHITE_SPACE . SITUACAO_CONTATO . RIGHT_PARENTHESES . WHITE_SPACE . VALUES . WHITE_SPACE . LEFT_PARENTHESES . DOUBLE_QUOTES . $contatos->getContato() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $contatos->getNome() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $contatos->getEmail() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $contatos->getCelular() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $contatos->getCadastrado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $contatos->getModificado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $contatos->getSituacoes_contatos()->getId() . DOUBLE_QUOTES . RIGHT_PARENTHESES;
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function read($where, $order, $hasPagination) {
			$count = NUMBER_ZERO;
			if ($where != STRING_EMPTY) {
				$where = WHERE . WHITE_SPACE . $where . WHITE_SPACE . STRING_AND . WHITE_SPACE . CONTATOS . DOT . SITUACAO_CONTATO . WHITE_SPACE . EQUALS . WHITE_SPACE. SITUACOES_CONTATOS . DOT . ID;
			} else {
				$where = WHERE . WHITE_SPACE . CONTATOS . DOT . SITUACAO_CONTATO . WHITE_SPACE . EQUALS . WHITE_SPACE. SITUACOES_CONTATOS . DOT . ID;
			}
			if ($order != STRING_EMPTY) {
				$order = ORDER_BY . WHITE_SPACE . $order;
			}
			$situacoes_contatosDao = new model\Situacoes_contatosDao($this->connection);
			$query = SELECT . WHITE_SPACE . $this->columns . COMMA . WHITE_SPACE . $situacoes_contatosDao->getColumns() . WHITE_SPACE . FROM . WHITE_SPACE . CONTATOS . WHITE_SPACE . CONTATOS . COMMA . WHITE_SPACE . SITUACOES_CONTATOS . WHITE_SPACE . SITUACOES_CONTATOS . WHITE_SPACE . $where;
			$this->setLog($query . WHITE_SPACE . $order);
			$result = $this->connection->execute($query . WHITE_SPACE . $order);
			$contatosList = array();
			while ($row = $result->fetch_assoc()) {
				$contatos = new model\Contatos();
				$contatos->setId($row[CONTATOS . POINT . ID]);
				$contatos->setContato($row[CONTATOS . POINT . CONTATO]);
				$contatos->setNome($row[CONTATOS . POINT . NOME]);
				$contatos->setEmail($row[CONTATOS . POINT . EMAIL]);
				$contatos->setCelular($row[CONTATOS . POINT . CELULAR]);
				$contatos->setCadastrado($row[CONTATOS . POINT . CADASTRADO]);
				$contatos->setModificado($row[CONTATOS . POINT . MODIFICADO]);
				$situacoes_contatos = new model\Situacoes_contatos();
				$situacoes_contatos->setId($row[SITUACOES_CONTATOS . DOT . ID]);
				$situacoes_contatos->setSituacao_contato($row[SITUACOES_CONTATOS . DOT . SITUACAO_CONTATO]);
				$contatos->setSituacoes_contatos($situacoes_contatos);
				$contatosList[$count] = $contatos;
				$count++;
			}
			$this->connection->free($result);
			if ($hasPagination && $count > NUMBER_ZERO) {
				$result = $this->connection->execute($query);
				$size = NUMBER_ZERO;
				while ($row = $result->fetch_assoc()) {
					$size++;
				}
				$this->connection->free($result);				
				$this->size = $size;
			}
			return $contatosList;
		}

		public function update($contatos) {
			$query = UPDATE . WHITE_SPACE . CONTATOS . WHITE_SPACE . SET . WHITE_SPACE . ID . WHITE_SPACE . EQUALS . 
					WHITE_SPACE . DOUBLE_QUOTES . $contatos->getId() . DOUBLE_QUOTES;
			if (!is_null($contatos->getContato()) && !empty($contatos->getContato())) {
				$query .= COMMA . WHITE_SPACE . CONTATO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$contatos->getContato() . DOUBLE_QUOTES;
			}
			if (!is_null($contatos->getNome()) && !empty($contatos->getNome())) {
				$query .= COMMA . WHITE_SPACE . NOME . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$contatos->getNome() . DOUBLE_QUOTES;
			}
			if (!is_null($contatos->getEmail()) && !empty($contatos->getEmail())) {
				$query .= COMMA . WHITE_SPACE . EMAIL . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$contatos->getEmail() . DOUBLE_QUOTES;
			}
			if (!is_null($contatos->getCelular()) && !empty($contatos->getCelular())) {
				$query .= COMMA . WHITE_SPACE . CELULAR . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$contatos->getCelular() . DOUBLE_QUOTES;
			}
			if (!is_null($contatos->getSituacoes_contatos()) && !empty($contatos->getSituacoes_contatos()->getId()) &&  
					!empty($contatos->getSituacoes_contatos()->getId())) {
				$query .= COMMA . WHITE_SPACE . SITUACAO_CONTATO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$contatos->getSituacoes_contatos()->getId() . DOUBLE_QUOTES;
			}
			$query .= COMMA . WHITE_SPACE . MODIFICADO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
					$contatos->getModificado() . DOUBLE_QUOTES . WHITE_SPACE . WHERE . WHITE_SPACE . ID . EQUALS . 
					$contatos->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function delete($contatos) {
			$query = DELETE . WHITE_SPACE . FROM . WHITE_SPACE . CONTATOS . WHITE_SPACE . WHERE . WHITE_SPACE . ID . 
					WHITE_SPACE . EQUALS . WHITE_SPACE . $contatos->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

	}

?>