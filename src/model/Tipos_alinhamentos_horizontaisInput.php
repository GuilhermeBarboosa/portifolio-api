<?php 
			
	/**
	 * Generated by Getz Framework.
	 * 
	 * @author  Mario Sakamoto <mskamot@gmail.com>
	 * @see     https://wtag.com.br/getz
	 * @since   1.0.0
	 * @version 1.0.0	
	 */
	 
	namespace src\model; 
	use lib\getz;
	use src\model;

	class Tipos_alinhamentos_horizontaisInput extends getz\Inject {
			
		private $id;
		private $tipo_alinhamento_horizontal;
		private $classe;
		private $cadastrado;
		private $modificado;
			
		private $error;	
			
		public function __construct($request) { 
			if (isset($request[ID])) {
				$this->id = $this->inject($request[ID]);	
			}
			if (isset($request[TIPO_ALINHAMENTO_HORIZONTAL])) {
				$this->tipo_alinhamento_horizontal = $this->inject($request[TIPO_ALINHAMENTO_HORIZONTAL]);	
			}
			if (isset($request[CLASSE])) {
				$this->classe = $this->inject($request[CLASSE]);	
			}
			if (isset($request[CADASTRADO])) {
				$this->cadastrado = $this->inject($request[CADASTRADO]);	
			}
			if (isset($request[MODIFICADO])) {
				$this->modificado = $this->inject($request[MODIFICADO]);	
			}
		}
					
		public function getId() {
			return $this->id;
		}
		
		public function setId($id) {
			$this->id = $id;
		}
					
		public function getTipo_alinhamento_horizontal() {
			return $this->tipo_alinhamento_horizontal;
		}
		
		public function setTipo_alinhamento_horizontal($tipo_alinhamento_horizontal) {
			$this->tipo_alinhamento_horizontal = $tipo_alinhamento_horizontal;
		}
					
		public function getClasse() {
			return $this->classe;
		}
		
		public function setClasse($classe) {
			$this->classe = $classe;
		}
					
		public function getCadastrado() {
			return $this->cadastrado;
		}
		
		public function setCadastrado($cadastrado) {
			$this->cadastrado = $cadastrado;
		}
					
		public function getModificado() {
			return $this->modificado;
		}
		
		public function setModificado($modificado) {
			$this->modificado = $modificado;
		}	
			
		public function getError() {
			return $this->error;
		}
		
		private function setError($error) {
			$this->error = $error;
		}	

		public function isValid($method) {		
			if ($method == POST) {
				if (is_null($this->tipo_alinhamento_horizontal) || empty($this->tipo_alinhamento_horizontal)) {
					$this->setError(THE_ATTRIBUTE . TIPO_ALINHAMENTO_HORIZONTAL . IS_REQUIRED);
					return false;					
				} 
				if (is_null($this->classe) || empty($this->classe)) {
					$this->setError(THE_ATTRIBUTE . CLASSE . IS_REQUIRED);
					return false;					
				} 
				return true;
			} else if ($method == PUT) {
				if (is_null($this->id) || empty($this->id)) {
					$this->setError(THE_ATTRIBUTE . ID . IS_REQUIRED);
					return false;					
				} else {
					return true;
				}
			}
		}
		
		public function getEntity() {
			$tipos_alinhamentos_horizontais = new model\Tipos_alinhamentos_horizontais();
			if (!is_null($this->id)) {
				$tipos_alinhamentos_horizontais->setId($this->id);
			}
			if (!is_null($this->tipo_alinhamento_horizontal)) {
				$tipos_alinhamentos_horizontais->setTipo_alinhamento_horizontal($this->tipo_alinhamento_horizontal);	
			}
			if (!is_null($this->classe)) {
				$tipos_alinhamentos_horizontais->setClasse($this->classe);	
			} 
			$tipos_alinhamentos_horizontais->setCadastrado(date(YMD_HIS, (time() - ONE_HOUR_IN_SECONDS * BRAZILIAN_TIME_ZONE)));
			$tipos_alinhamentos_horizontais->setModificado(date(YMD_HIS, (time() - ONE_HOUR_IN_SECONDS * BRAZILIAN_TIME_ZONE)));
			return $tipos_alinhamentos_horizontais;
		}		
		
	}
	
?>